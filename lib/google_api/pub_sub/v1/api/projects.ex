# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.PubSub.V1.Api.Projects do
  @moduledoc """
  API calls for all endpoints tagged `Projects`.
  """

  alias GoogleApi.PubSub.V1.Connection
  alias GoogleApi.Gax.{Request, Response}


  @doc """
  Creates a snapshot from the requested subscription. Snapshots are used in &lt;a href&#x3D;\&quot;https://cloud.google.com/pubsub/docs/replay-overview\&quot;&gt;Seek&lt;/a&gt; operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot. &lt;br&gt;&lt;br&gt; &lt;b&gt;BETA:&lt;/b&gt; This feature is part of a beta release. This API might be changed in backward-incompatible ways and is not recommended for production use. It is not subject to any SLA or deprecation policy.&lt;br&gt;&lt;br&gt; If the snapshot already exists, returns &#x60;ALREADY_EXISTS&#x60;. If the requested subscription doesn&#39;t exist, returns &#x60;NOT_FOUND&#x60;. If the backlog in the subscription is too old -- and the resulting snapshot would expire in less than 1 hour -- then &#x60;FAILED_PRECONDITION&#x60; is returned. See also the &#x60;Snapshot.expire_time&#x60; field. If the name is not provided in the request, the server will assign a random name for this snapshot on the same project as the subscription, conforming to the [resource name format](https://cloud.google.com/pubsub/docs/admin#resource_names). The generated name is populated in the returned Snapshot object. Note that for REST API requests, you must specify a name in the request.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;name&#x60;. Optional user-provided name for this snapshot. If the name is not provided in the request, the server will assign a random name for this snapshot on the same project as the subscription. Note that for REST API requests, you must specify a name.  See the &lt;a href&#x3D;\&quot;https://cloud.google.com/pubsub/docs/admin#resource_names\&quot;&gt; resource name rules&lt;/a&gt;. Format is &#x60;projects/{project}/snapshots/{snap}&#x60;.
  - snapshots_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (CreateSnapshotRequest): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Snapshot{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_snapshots_create(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Snapshot.t} | {:error, Tesla.Env.t}
  def pubsub_projects_snapshots_create(connection, projects_id, snapshots_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:put)
      |> Request.url("/v1/projects/{projectsId}/snapshots/{snapshotsId}", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "snapshotsId" => URI.encode_www_form(snapshots_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Snapshot{}])
  end

  @doc """
  Removes an existing snapshot. Snapshots are used in &lt;a href&#x3D;\&quot;https://cloud.google.com/pubsub/docs/replay-overview\&quot;&gt;Seek&lt;/a&gt; operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.&lt;br&gt;&lt;br&gt; &lt;b&gt;BETA:&lt;/b&gt; This feature is part of a beta release. This API might be changed in backward-incompatible ways and is not recommended for production use. It is not subject to any SLA or deprecation policy. When the snapshot is deleted, all messages retained in the snapshot are immediately dropped. After a snapshot is deleted, a new one may be created with the same name, but the new one has no association with the old snapshot or its subscription, unless the same subscription is specified.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;snapshot&#x60;. The name of the snapshot to delete. Format is &#x60;projects/{project}/snapshots/{snap}&#x60;.
  - snapshots_id (String.t): Part of &#x60;snapshot&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_snapshots_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Empty.t} | {:error, Tesla.Env.t}
  def pubsub_projects_snapshots_delete(connection, projects_id, snapshots_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query
    }
    request =
      Request.new
      |> Request.method(:delete)
      |> Request.url("/v1/projects/{projectsId}/snapshots/{snapshotsId}", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "snapshotsId" => URI.encode_www_form(snapshots_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Empty{}])
  end

  @doc """
  Gets the configuration details of a snapshot. Snapshots are used in &lt;a href&#x3D;\&quot;https://cloud.google.com/pubsub/docs/replay-overview\&quot;&gt;Seek&lt;/a&gt; operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.&lt;br&gt;&lt;br&gt; &lt;b&gt;BETA:&lt;/b&gt; This feature is part of a beta release. This API might be changed in backward-incompatible ways and is not recommended for production use. It is not subject to any SLA or deprecation policy.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;snapshot&#x60;. The name of the snapshot to get. Format is &#x60;projects/{project}/snapshots/{snap}&#x60;.
  - snapshots_id (String.t): Part of &#x60;snapshot&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Snapshot{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_snapshots_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Snapshot.t} | {:error, Tesla.Env.t}
  def pubsub_projects_snapshots_get(connection, projects_id, snapshots_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query
    }
    request =
      Request.new
      |> Request.method(:get)
      |> Request.url("/v1/projects/{projectsId}/snapshots/{snapshotsId}", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "snapshotsId" => URI.encode_www_form(snapshots_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Snapshot{}])
  end

  @doc """
  Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;resource&#x60;. REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.
  - snapshots_id (String.t): Part of &#x60;resource&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Policy{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_snapshots_get_iam_policy(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Policy.t} | {:error, Tesla.Env.t}
  def pubsub_projects_snapshots_get_iam_policy(connection, projects_id, snapshots_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query
    }
    request =
      Request.new
      |> Request.method(:get)
      |> Request.url("/v1/projects/{projectsId}/snapshots/{snapshotsId}:getIamPolicy", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "snapshotsId" => URI.encode_www_form(snapshots_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Policy{}])
  end

  @doc """
  Lists the existing snapshots. Snapshots are used in &lt;a href&#x3D;\&quot;https://cloud.google.com/pubsub/docs/replay-overview\&quot;&gt;Seek&lt;/a&gt; operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.&lt;br&gt;&lt;br&gt; &lt;b&gt;BETA:&lt;/b&gt; This feature is part of a beta release. This API might be changed in backward-incompatible ways and is not recommended for production use. It is not subject to any SLA or deprecation policy.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;project&#x60;. The name of the project in which to list snapshots. Format is &#x60;projects/{project-id}&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :pageToken (String.t): The value returned by the last &#x60;ListSnapshotsResponse&#x60;; indicates that this is a continuation of a prior &#x60;ListSnapshots&#x60; call, and that the system should return the next page of data.
    - :pageSize (integer()): Maximum number of snapshots to return.

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.ListSnapshotsResponse{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_snapshots_list(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.ListSnapshotsResponse.t} | {:error, Tesla.Env.t}
  def pubsub_projects_snapshots_list(connection, projects_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"pageToken" => :query,
      :"pageSize" => :query
    }
    request =
      Request.new
      |> Request.method(:get)
      |> Request.url("/v1/projects/{projectsId}/snapshots", %{
         "projectsId" => URI.encode_www_form(projects_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.ListSnapshotsResponse{}])
  end

  @doc """
  Updates an existing snapshot. Snapshots are used in &lt;a href&#x3D;\&quot;https://cloud.google.com/pubsub/docs/replay-overview\&quot;&gt;Seek&lt;/a&gt; operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.&lt;br&gt;&lt;br&gt; &lt;b&gt;BETA:&lt;/b&gt; This feature is part of a beta release. This API might be changed in backward-incompatible ways and is not recommended for production use. It is not subject to any SLA or deprecation policy. Note that certain properties of a snapshot are not modifiable.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;snapshot.name&#x60;. The name of the snapshot.
  - snapshots_id (String.t): Part of &#x60;snapshot.name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (UpdateSnapshotRequest): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Snapshot{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_snapshots_patch(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Snapshot.t} | {:error, Tesla.Env.t}
  def pubsub_projects_snapshots_patch(connection, projects_id, snapshots_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:patch)
      |> Request.url("/v1/projects/{projectsId}/snapshots/{snapshotsId}", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "snapshotsId" => URI.encode_www_form(snapshots_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Snapshot{}])
  end

  @doc """
  Sets the access control policy on the specified resource. Replaces any existing policy.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;resource&#x60;. REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.
  - snapshots_id (String.t): Part of &#x60;resource&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (SetIamPolicyRequest): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Policy{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_snapshots_set_iam_policy(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Policy.t} | {:error, Tesla.Env.t}
  def pubsub_projects_snapshots_set_iam_policy(connection, projects_id, snapshots_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:post)
      |> Request.url("/v1/projects/{projectsId}/snapshots/{snapshotsId}:setIamPolicy", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "snapshotsId" => URI.encode_www_form(snapshots_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Policy{}])
  end

  @doc """
  Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.  Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;resource&#x60;. REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.
  - snapshots_id (String.t): Part of &#x60;resource&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (TestIamPermissionsRequest): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.TestIamPermissionsResponse{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_snapshots_test_iam_permissions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.TestIamPermissionsResponse.t} | {:error, Tesla.Env.t}
  def pubsub_projects_snapshots_test_iam_permissions(connection, projects_id, snapshots_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:post)
      |> Request.url("/v1/projects/{projectsId}/snapshots/{snapshotsId}:testIamPermissions", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "snapshotsId" => URI.encode_www_form(snapshots_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.TestIamPermissionsResponse{}])
  end

  @doc """
  Acknowledges the messages associated with the &#x60;ack_ids&#x60; in the &#x60;AcknowledgeRequest&#x60;. The Pub/Sub system can remove the relevant messages from the subscription.  Acknowledging a message whose ack deadline has expired may succeed, but such a message may be redelivered later. Acknowledging a message more than once will not result in an error.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;subscription&#x60;. The subscription whose message is being acknowledged. Format is &#x60;projects/{project}/subscriptions/{sub}&#x60;.
  - subscriptions_id (String.t): Part of &#x60;subscription&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (AcknowledgeRequest): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_subscriptions_acknowledge(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Empty.t} | {:error, Tesla.Env.t}
  def pubsub_projects_subscriptions_acknowledge(connection, projects_id, subscriptions_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:post)
      |> Request.url("/v1/projects/{projectsId}/subscriptions/{subscriptionsId}:acknowledge", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "subscriptionsId" => URI.encode_www_form(subscriptions_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Empty{}])
  end

  @doc """
  Creates a subscription to a given topic. See the &lt;a href&#x3D;\&quot;https://cloud.google.com/pubsub/docs/admin#resource_names\&quot;&gt; resource name rules&lt;/a&gt;. If the subscription already exists, returns &#x60;ALREADY_EXISTS&#x60;. If the corresponding topic doesn&#39;t exist, returns &#x60;NOT_FOUND&#x60;.  If the name is not provided in the request, the server will assign a random name for this subscription on the same project as the topic, conforming to the [resource name format](https://cloud.google.com/pubsub/docs/admin#resource_names). The generated name is populated in the returned Subscription object. Note that for REST API requests, you must specify a name in the request.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;name&#x60;. The name of the subscription. It must have the format &#x60;\&quot;projects/{project}/subscriptions/{subscription}\&quot;&#x60;. &#x60;{subscription}&#x60; must start with a letter, and contain only letters (&#x60;[A-Za-z]&#x60;), numbers (&#x60;[0-9]&#x60;), dashes (&#x60;-&#x60;), underscores (&#x60;_&#x60;), periods (&#x60;.&#x60;), tildes (&#x60;~&#x60;), plus (&#x60;+&#x60;) or percent signs (&#x60;%&#x60;). It must be between 3 and 255 characters in length, and it must not start with &#x60;\&quot;goog\&quot;&#x60;.
  - subscriptions_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (Subscription): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Subscription{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_subscriptions_create(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Subscription.t} | {:error, Tesla.Env.t}
  def pubsub_projects_subscriptions_create(connection, projects_id, subscriptions_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:put)
      |> Request.url("/v1/projects/{projectsId}/subscriptions/{subscriptionsId}", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "subscriptionsId" => URI.encode_www_form(subscriptions_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Subscription{}])
  end

  @doc """
  Deletes an existing subscription. All messages retained in the subscription are immediately dropped. Calls to &#x60;Pull&#x60; after deletion will return &#x60;NOT_FOUND&#x60;. After a subscription is deleted, a new one may be created with the same name, but the new one has no association with the old subscription or its topic unless the same topic is specified.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;subscription&#x60;. The subscription to delete. Format is &#x60;projects/{project}/subscriptions/{sub}&#x60;.
  - subscriptions_id (String.t): Part of &#x60;subscription&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_subscriptions_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Empty.t} | {:error, Tesla.Env.t}
  def pubsub_projects_subscriptions_delete(connection, projects_id, subscriptions_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query
    }
    request =
      Request.new
      |> Request.method(:delete)
      |> Request.url("/v1/projects/{projectsId}/subscriptions/{subscriptionsId}", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "subscriptionsId" => URI.encode_www_form(subscriptions_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Empty{}])
  end

  @doc """
  Gets the configuration details of a subscription.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;subscription&#x60;. The name of the subscription to get. Format is &#x60;projects/{project}/subscriptions/{sub}&#x60;.
  - subscriptions_id (String.t): Part of &#x60;subscription&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Subscription{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_subscriptions_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Subscription.t} | {:error, Tesla.Env.t}
  def pubsub_projects_subscriptions_get(connection, projects_id, subscriptions_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query
    }
    request =
      Request.new
      |> Request.method(:get)
      |> Request.url("/v1/projects/{projectsId}/subscriptions/{subscriptionsId}", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "subscriptionsId" => URI.encode_www_form(subscriptions_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Subscription{}])
  end

  @doc """
  Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;resource&#x60;. REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.
  - subscriptions_id (String.t): Part of &#x60;resource&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Policy{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_subscriptions_get_iam_policy(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Policy.t} | {:error, Tesla.Env.t}
  def pubsub_projects_subscriptions_get_iam_policy(connection, projects_id, subscriptions_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query
    }
    request =
      Request.new
      |> Request.method(:get)
      |> Request.url("/v1/projects/{projectsId}/subscriptions/{subscriptionsId}:getIamPolicy", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "subscriptionsId" => URI.encode_www_form(subscriptions_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Policy{}])
  end

  @doc """
  Lists matching subscriptions.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;project&#x60;. The name of the project in which to list subscriptions. Format is &#x60;projects/{project-id}&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :pageToken (String.t): The value returned by the last &#x60;ListSubscriptionsResponse&#x60;; indicates that this is a continuation of a prior &#x60;ListSubscriptions&#x60; call, and that the system should return the next page of data.
    - :pageSize (integer()): Maximum number of subscriptions to return.

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.ListSubscriptionsResponse{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_subscriptions_list(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.ListSubscriptionsResponse.t} | {:error, Tesla.Env.t}
  def pubsub_projects_subscriptions_list(connection, projects_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"pageToken" => :query,
      :"pageSize" => :query
    }
    request =
      Request.new
      |> Request.method(:get)
      |> Request.url("/v1/projects/{projectsId}/subscriptions", %{
         "projectsId" => URI.encode_www_form(projects_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.ListSubscriptionsResponse{}])
  end

  @doc """
  Modifies the ack deadline for a specific message. This method is useful to indicate that more time is needed to process a message by the subscriber, or to make the message available for redelivery if the processing was interrupted. Note that this does not modify the subscription-level &#x60;ackDeadlineSeconds&#x60; used for subsequent messages.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;subscription&#x60;. The name of the subscription. Format is &#x60;projects/{project}/subscriptions/{sub}&#x60;.
  - subscriptions_id (String.t): Part of &#x60;subscription&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (ModifyAckDeadlineRequest): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_subscriptions_modify_ack_deadline(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Empty.t} | {:error, Tesla.Env.t}
  def pubsub_projects_subscriptions_modify_ack_deadline(connection, projects_id, subscriptions_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:post)
      |> Request.url("/v1/projects/{projectsId}/subscriptions/{subscriptionsId}:modifyAckDeadline", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "subscriptionsId" => URI.encode_www_form(subscriptions_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Empty{}])
  end

  @doc """
  Modifies the &#x60;PushConfig&#x60; for a specified subscription.  This may be used to change a push subscription to a pull one (signified by an empty &#x60;PushConfig&#x60;) or vice versa, or change the endpoint URL and other attributes of a push subscription. Messages will accumulate for delivery continuously through the call regardless of changes to the &#x60;PushConfig&#x60;.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;subscription&#x60;. The name of the subscription. Format is &#x60;projects/{project}/subscriptions/{sub}&#x60;.
  - subscriptions_id (String.t): Part of &#x60;subscription&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (ModifyPushConfigRequest): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_subscriptions_modify_push_config(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Empty.t} | {:error, Tesla.Env.t}
  def pubsub_projects_subscriptions_modify_push_config(connection, projects_id, subscriptions_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:post)
      |> Request.url("/v1/projects/{projectsId}/subscriptions/{subscriptionsId}:modifyPushConfig", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "subscriptionsId" => URI.encode_www_form(subscriptions_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Empty{}])
  end

  @doc """
  Updates an existing subscription. Note that certain properties of a subscription, such as its topic, are not modifiable.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;subscription.name&#x60;. The name of the subscription. It must have the format &#x60;\&quot;projects/{project}/subscriptions/{subscription}\&quot;&#x60;. &#x60;{subscription}&#x60; must start with a letter, and contain only letters (&#x60;[A-Za-z]&#x60;), numbers (&#x60;[0-9]&#x60;), dashes (&#x60;-&#x60;), underscores (&#x60;_&#x60;), periods (&#x60;.&#x60;), tildes (&#x60;~&#x60;), plus (&#x60;+&#x60;) or percent signs (&#x60;%&#x60;). It must be between 3 and 255 characters in length, and it must not start with &#x60;\&quot;goog\&quot;&#x60;.
  - subscriptions_id (String.t): Part of &#x60;subscription.name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (UpdateSubscriptionRequest): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Subscription{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_subscriptions_patch(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Subscription.t} | {:error, Tesla.Env.t}
  def pubsub_projects_subscriptions_patch(connection, projects_id, subscriptions_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:patch)
      |> Request.url("/v1/projects/{projectsId}/subscriptions/{subscriptionsId}", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "subscriptionsId" => URI.encode_www_form(subscriptions_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Subscription{}])
  end

  @doc """
  Pulls messages from the server. The server may return &#x60;UNAVAILABLE&#x60; if there are too many concurrent pull requests pending for the given subscription.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;subscription&#x60;. The subscription from which messages should be pulled. Format is &#x60;projects/{project}/subscriptions/{sub}&#x60;.
  - subscriptions_id (String.t): Part of &#x60;subscription&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (PullRequest): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.PullResponse{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_subscriptions_pull(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.PullResponse.t} | {:error, Tesla.Env.t}
  def pubsub_projects_subscriptions_pull(connection, projects_id, subscriptions_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:post)
      |> Request.url("/v1/projects/{projectsId}/subscriptions/{subscriptionsId}:pull", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "subscriptionsId" => URI.encode_www_form(subscriptions_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.PullResponse{}])
  end

  @doc """
  Seeks an existing subscription to a point in time or to a given snapshot, whichever is provided in the request. Snapshots are used in &lt;a href&#x3D;\&quot;https://cloud.google.com/pubsub/docs/replay-overview\&quot;&gt;Seek&lt;/a&gt; operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot. Note that both the subscription and the snapshot must be on the same topic.&lt;br&gt;&lt;br&gt; &lt;b&gt;BETA:&lt;/b&gt; This feature is part of a beta release. This API might be changed in backward-incompatible ways and is not recommended for production use. It is not subject to any SLA or deprecation policy.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;subscription&#x60;. The subscription to affect.
  - subscriptions_id (String.t): Part of &#x60;subscription&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (SeekRequest): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.SeekResponse{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_subscriptions_seek(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.SeekResponse.t} | {:error, Tesla.Env.t}
  def pubsub_projects_subscriptions_seek(connection, projects_id, subscriptions_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:post)
      |> Request.url("/v1/projects/{projectsId}/subscriptions/{subscriptionsId}:seek", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "subscriptionsId" => URI.encode_www_form(subscriptions_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.SeekResponse{}])
  end

  @doc """
  Sets the access control policy on the specified resource. Replaces any existing policy.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;resource&#x60;. REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.
  - subscriptions_id (String.t): Part of &#x60;resource&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (SetIamPolicyRequest): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Policy{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_subscriptions_set_iam_policy(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Policy.t} | {:error, Tesla.Env.t}
  def pubsub_projects_subscriptions_set_iam_policy(connection, projects_id, subscriptions_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:post)
      |> Request.url("/v1/projects/{projectsId}/subscriptions/{subscriptionsId}:setIamPolicy", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "subscriptionsId" => URI.encode_www_form(subscriptions_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Policy{}])
  end

  @doc """
  Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.  Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;resource&#x60;. REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.
  - subscriptions_id (String.t): Part of &#x60;resource&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (TestIamPermissionsRequest): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.TestIamPermissionsResponse{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_subscriptions_test_iam_permissions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.TestIamPermissionsResponse.t} | {:error, Tesla.Env.t}
  def pubsub_projects_subscriptions_test_iam_permissions(connection, projects_id, subscriptions_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:post)
      |> Request.url("/v1/projects/{projectsId}/subscriptions/{subscriptionsId}:testIamPermissions", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "subscriptionsId" => URI.encode_www_form(subscriptions_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.TestIamPermissionsResponse{}])
  end

  @doc """
  Creates the given topic with the given name. See the &lt;a href&#x3D;\&quot;https://cloud.google.com/pubsub/docs/admin#resource_names\&quot;&gt; resource name rules&lt;/a&gt;.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;name&#x60;. The name of the topic. It must have the format &#x60;\&quot;projects/{project}/topics/{topic}\&quot;&#x60;. &#x60;{topic}&#x60; must start with a letter, and contain only letters (&#x60;[A-Za-z]&#x60;), numbers (&#x60;[0-9]&#x60;), dashes (&#x60;-&#x60;), underscores (&#x60;_&#x60;), periods (&#x60;.&#x60;), tildes (&#x60;~&#x60;), plus (&#x60;+&#x60;) or percent signs (&#x60;%&#x60;). It must be between 3 and 255 characters in length, and it must not start with &#x60;\&quot;goog\&quot;&#x60;.
  - topics_id (String.t): Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (Topic): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Topic{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_topics_create(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Topic.t} | {:error, Tesla.Env.t}
  def pubsub_projects_topics_create(connection, projects_id, topics_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:put)
      |> Request.url("/v1/projects/{projectsId}/topics/{topicsId}", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "topicsId" => URI.encode_www_form(topics_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Topic{}])
  end

  @doc """
  Deletes the topic with the given name. Returns &#x60;NOT_FOUND&#x60; if the topic does not exist. After a topic is deleted, a new topic may be created with the same name; this is an entirely new topic with none of the old configuration or subscriptions. Existing subscriptions to this topic are not deleted, but their &#x60;topic&#x60; field is set to &#x60;_deleted-topic_&#x60;.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;topic&#x60;. Name of the topic to delete. Format is &#x60;projects/{project}/topics/{topic}&#x60;.
  - topics_id (String.t): Part of &#x60;topic&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Empty{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_topics_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Empty.t} | {:error, Tesla.Env.t}
  def pubsub_projects_topics_delete(connection, projects_id, topics_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query
    }
    request =
      Request.new
      |> Request.method(:delete)
      |> Request.url("/v1/projects/{projectsId}/topics/{topicsId}", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "topicsId" => URI.encode_www_form(topics_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Empty{}])
  end

  @doc """
  Gets the configuration of a topic.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;topic&#x60;. The name of the topic to get. Format is &#x60;projects/{project}/topics/{topic}&#x60;.
  - topics_id (String.t): Part of &#x60;topic&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Topic{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_topics_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Topic.t} | {:error, Tesla.Env.t}
  def pubsub_projects_topics_get(connection, projects_id, topics_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query
    }
    request =
      Request.new
      |> Request.method(:get)
      |> Request.url("/v1/projects/{projectsId}/topics/{topicsId}", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "topicsId" => URI.encode_www_form(topics_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Topic{}])
  end

  @doc """
  Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;resource&#x60;. REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.
  - topics_id (String.t): Part of &#x60;resource&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Policy{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_topics_get_iam_policy(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Policy.t} | {:error, Tesla.Env.t}
  def pubsub_projects_topics_get_iam_policy(connection, projects_id, topics_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query
    }
    request =
      Request.new
      |> Request.method(:get)
      |> Request.url("/v1/projects/{projectsId}/topics/{topicsId}:getIamPolicy", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "topicsId" => URI.encode_www_form(topics_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Policy{}])
  end

  @doc """
  Lists matching topics.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;project&#x60;. The name of the project in which to list topics. Format is &#x60;projects/{project-id}&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :pageToken (String.t): The value returned by the last &#x60;ListTopicsResponse&#x60;; indicates that this is a continuation of a prior &#x60;ListTopics&#x60; call, and that the system should return the next page of data.
    - :pageSize (integer()): Maximum number of topics to return.

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.ListTopicsResponse{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_topics_list(Tesla.Env.client, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.ListTopicsResponse.t} | {:error, Tesla.Env.t}
  def pubsub_projects_topics_list(connection, projects_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"pageToken" => :query,
      :"pageSize" => :query
    }
    request =
      Request.new
      |> Request.method(:get)
      |> Request.url("/v1/projects/{projectsId}/topics", %{
         "projectsId" => URI.encode_www_form(projects_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.ListTopicsResponse{}])
  end

  @doc """
  Updates an existing topic. Note that certain properties of a topic are not modifiable.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;topic.name&#x60;. The name of the topic. It must have the format &#x60;\&quot;projects/{project}/topics/{topic}\&quot;&#x60;. &#x60;{topic}&#x60; must start with a letter, and contain only letters (&#x60;[A-Za-z]&#x60;), numbers (&#x60;[0-9]&#x60;), dashes (&#x60;-&#x60;), underscores (&#x60;_&#x60;), periods (&#x60;.&#x60;), tildes (&#x60;~&#x60;), plus (&#x60;+&#x60;) or percent signs (&#x60;%&#x60;). It must be between 3 and 255 characters in length, and it must not start with &#x60;\&quot;goog\&quot;&#x60;.
  - topics_id (String.t): Part of &#x60;topic.name&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (UpdateTopicRequest): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Topic{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_topics_patch(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Topic.t} | {:error, Tesla.Env.t}
  def pubsub_projects_topics_patch(connection, projects_id, topics_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:patch)
      |> Request.url("/v1/projects/{projectsId}/topics/{topicsId}", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "topicsId" => URI.encode_www_form(topics_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Topic{}])
  end

  @doc """
  Adds one or more messages to the topic. Returns &#x60;NOT_FOUND&#x60; if the topic does not exist.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;topic&#x60;. The messages in the request will be published on this topic. Format is &#x60;projects/{project}/topics/{topic}&#x60;.
  - topics_id (String.t): Part of &#x60;topic&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (PublishRequest): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.PublishResponse{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_topics_publish(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.PublishResponse.t} | {:error, Tesla.Env.t}
  def pubsub_projects_topics_publish(connection, projects_id, topics_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:post)
      |> Request.url("/v1/projects/{projectsId}/topics/{topicsId}:publish", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "topicsId" => URI.encode_www_form(topics_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.PublishResponse{}])
  end

  @doc """
  Sets the access control policy on the specified resource. Replaces any existing policy.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;resource&#x60;. REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.
  - topics_id (String.t): Part of &#x60;resource&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (SetIamPolicyRequest): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.Policy{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_topics_set_iam_policy(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.Policy.t} | {:error, Tesla.Env.t}
  def pubsub_projects_topics_set_iam_policy(connection, projects_id, topics_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:post)
      |> Request.url("/v1/projects/{projectsId}/topics/{topicsId}:setIamPolicy", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "topicsId" => URI.encode_www_form(topics_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.Policy{}])
  end

  @doc """
  Lists the names of the snapshots on this topic. Snapshots are used in &lt;a href&#x3D;\&quot;https://cloud.google.com/pubsub/docs/replay-overview\&quot;&gt;Seek&lt;/a&gt; operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.&lt;br&gt;&lt;br&gt; &lt;b&gt;BETA:&lt;/b&gt; This feature is part of a beta release. This API might be changed in backward-incompatible ways and is not recommended for production use. It is not subject to any SLA or deprecation policy.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;topic&#x60;. The name of the topic that snapshots are attached to. Format is &#x60;projects/{project}/topics/{topic}&#x60;.
  - topics_id (String.t): Part of &#x60;topic&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :pageSize (integer()): Maximum number of snapshot names to return.
    - :pageToken (String.t): The value returned by the last &#x60;ListTopicSnapshotsResponse&#x60;; indicates that this is a continuation of a prior &#x60;ListTopicSnapshots&#x60; call, and that the system should return the next page of data.

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.ListTopicSnapshotsResponse{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_topics_snapshots_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.ListTopicSnapshotsResponse.t} | {:error, Tesla.Env.t}
  def pubsub_projects_topics_snapshots_list(connection, projects_id, topics_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"pageSize" => :query,
      :"pageToken" => :query
    }
    request =
      Request.new
      |> Request.method(:get)
      |> Request.url("/v1/projects/{projectsId}/topics/{topicsId}/snapshots", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "topicsId" => URI.encode_www_form(topics_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.ListTopicSnapshotsResponse{}])
  end

  @doc """
  Lists the names of the subscriptions on this topic.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;topic&#x60;. The name of the topic that subscriptions are attached to. Format is &#x60;projects/{project}/topics/{topic}&#x60;.
  - topics_id (String.t): Part of &#x60;topic&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :pageSize (integer()): Maximum number of subscription names to return.
    - :pageToken (String.t): The value returned by the last &#x60;ListTopicSubscriptionsResponse&#x60;; indicates that this is a continuation of a prior &#x60;ListTopicSubscriptions&#x60; call, and that the system should return the next page of data.

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.ListTopicSubscriptionsResponse{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_topics_subscriptions_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.ListTopicSubscriptionsResponse.t} | {:error, Tesla.Env.t}
  def pubsub_projects_topics_subscriptions_list(connection, projects_id, topics_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"pageSize" => :query,
      :"pageToken" => :query
    }
    request =
      Request.new
      |> Request.method(:get)
      |> Request.url("/v1/projects/{projectsId}/topics/{topicsId}/subscriptions", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "topicsId" => URI.encode_www_form(topics_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.ListTopicSubscriptionsResponse{}])
  end

  @doc """
  Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.  Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.

  ## Parameters

  - connection (GoogleApi.PubSub.V1.Connection): Connection to server
  - projects_id (String.t): Part of &#x60;resource&#x60;. REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.
  - topics_id (String.t): Part of &#x60;resource&#x60;. See documentation of &#x60;projectsId&#x60;.
  - optional_params (KeywordList): [optional] Optional parameters
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :access_token (String.t): OAuth access token.
    - :upload_protocol (String.t): Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;).
    - :quotaUser (String.t): Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :uploadType (String.t): Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;).
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :callback (String.t): JSONP
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :$.xgafv (String.t): V1 error format.
    - :alt (String.t): Data format for response.
    - :body (TestIamPermissionsRequest): 

  ## Returns

  {:ok, %GoogleApi.PubSub.V1.Model.TestIamPermissionsResponse{}} on success
  {:error, info} on failure
  """
  @spec pubsub_projects_topics_test_iam_permissions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, GoogleApi.PubSub.V1.Model.TestIamPermissionsResponse.t} | {:error, Tesla.Env.t}
  def pubsub_projects_topics_test_iam_permissions(connection, projects_id, topics_id, optional_params \\ [], opts \\ []) do
    optional_params_config = %{
      :"key" => :query,
      :"access_token" => :query,
      :"upload_protocol" => :query,
      :"quotaUser" => :query,
      :"prettyPrint" => :query,
      :"uploadType" => :query,
      :"fields" => :query,
      :"callback" => :query,
      :"oauth_token" => :query,
      :"$.xgafv" => :query,
      :"alt" => :query,
      :"body" => :body
    }
    request =
      Request.new
      |> Request.method(:post)
      |> Request.url("/v1/projects/{projectsId}/topics/{topicsId}:testIamPermissions", %{
         "projectsId" => URI.encode_www_form(projects_id),
         "topicsId" => URI.encode_www_form(topics_id)
       })
      |> Request.add_optional_params(optional_params_config, optional_params)

    connection
    |> Connection.execute(request)
    |> Response.decode(opts ++ [struct: %GoogleApi.PubSub.V1.Model.TestIamPermissionsResponse{}])
  end
end
